{"ast":null,"code":"var _jsxFileName = \"/Users/luise/Documents/Udemy-Courses/react-course/Expense-Tracker-App/src/components/Expenses/ExpensesList.js\";\nimport React from 'react';\nimport ExpenseItem from './ExpenseItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpensesList = _ref => {\n  let {\n    filteredExpenses\n  } = _ref;\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 27\n  }, this);\n  {/* we are currently passing items in through props. We are then mapping them so we can reach every single one of them. Then we are setting each expense into the component <ExpenseItem/> as props as well in form of title, amount, and date */}\n  {/* if filteredExpenses.length equal to 0? yes? then render whats right after the ? mark. if not then render the Expense items corresponding to the year selected */}\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem\n    // individual id's are better than index as keys\n    , {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this));\n  }\n};\n_c = ExpensesList;\nexport default ExpensesList;\nvar _c;\n$RefreshReg$(_c, \"ExpensesList\");","map":{"version":3,"names":["React","ExpenseItem","ExpensesList","filteredExpenses","expensesContent","length","map","expense","title","amount","date","id"],"sources":["/Users/luise/Documents/Udemy-Courses/react-course/Expense-Tracker-App/src/components/Expenses/ExpensesList.js"],"sourcesContent":["import React from 'react'\nimport ExpenseItem from './ExpenseItem';\n\nconst ExpensesList = ({ filteredExpenses }) => {\n\n    let expensesContent = <p>No expenses found.</p>;\n    {/* we are currently passing items in through props. We are then mapping them so we can reach every single one of them. Then we are setting each expense into the component <ExpenseItem/> as props as well in form of title, amount, and date */ }\n    {/* if filteredExpenses.length equal to 0? yes? then render whats right after the ? mark. if not then render the Expense items corresponding to the year selected */ }\n    if (filteredExpenses.length > 0) {\n        expensesContent = filteredExpenses.map((expense) => (\n            <ExpenseItem\n                // individual id's are better than index as keys\n                key={expense.id}\n                title={expense.title}\n                amount={expense.amount}\n                date={expense.date}\n            />\n        ));\n    }\n\n}\n\nexport default ExpensesList"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAAC;AAExC,MAAMC,YAAY,GAAG,QAA0B;EAAA,IAAzB;IAAEC;EAAiB,CAAC;EAEtC,IAAIC,eAAe,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAyB;EAC/C,CAAC,gPAAiP;EAClP,CAAC,mKAAoK;EACrK,IAAID,gBAAgB,CAACE,MAAM,GAAG,CAAC,EAAE;IAC7BD,eAAe,GAAGD,gBAAgB,CAACG,GAAG,CAAEC,OAAO,iBAC3C,QAAC;IACG;IAAA;MAEA,KAAK,EAAEA,OAAO,CAACC,KAAM;MACrB,MAAM,EAAED,OAAO,CAACE,MAAO;MACvB,IAAI,EAAEF,OAAO,CAACG;IAAK,GAHdH,OAAO,CAACI,EAAE;MAAA;MAAA;MAAA;IAAA,QAKtB,CAAC;EACN;AAEJ,CAAC;AAAA,KAjBKT,YAAY;AAmBlB,eAAeA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module"}